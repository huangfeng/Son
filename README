/**
* SON, 'Style Object Notation' http://timfarland.com/son
* Released under the MIT license
*
* Copyright (C) 2010 Tim Farland
*
* Converts JSON to CSS
*
* Inspired by Sass http://sass-lang.com
* But intended as a more javascript-native solution for manageable css
*
* Some internal utility funcs informed by RightJS include, startsWith, 
* and isHash functions. The original lib was written with RightJS 
* but I ported those funcs to reduce dependencies
* http://rightjs.org <<< try RightJS, if you haven't. It is good
*/

/*



USAGE NOTES AND GOTCHAS


We're trying to make json act like css here, so there are some extra things we need to do to avoid conflicts. 


1 ] Because json keys must be unique at each level, you can't overwrite with the same key like in raw css. To get around this, suffix the selector with a pipes to give uniqueness. Anything after the pipe will be ignored. 



	e.g: ".myClass|" overwrites ".myClass"

	e.g: ".myClass|uniqueid" overwrites ".myClass" 


2 ] To avoid certain characters being treated as js directives, you need to wrap some things in quotes: 



	selectors that start with: . # * [ ~ + : >


		e.g: ".myClass", ":hover"



	- propeties that contain dashes


		e.g: "font-size", "list-style-type"



	- values that are mixtures of integers and strings


		e.g: "100%", "40px"


3 ] son looks at every key in the object to try to determine if it is a selector or a css property name. It looks at the key name and sees if it matches any css property name or part. So if you try to write a selector for 'table', it will want to think you mean the css property 'table-layout'.

So for some tags you need to really make sure it gets treated as a selector. To do that, just prefix it with a "$" (it will get ignored):

	$table
	$span
	$label

If you're not sure, or something breaks, just err on the safe side by prefixing any key you want to be treated as a selector with $;	 


IF YOU'RE NOT SURE:

- wrap every key/value in quotes
- prefix any key you want to be treated as a selector with $


DEV TO DO:

- Convert the other way, from css to son (so people can bring in existing stylesheets)
- Debug report mode
- Create cached css files w. node.js
- Code around conflict so $ selector override isn't needed (try something along the lines of checking for equality against all possible property chunk combinations as whole strings)
- Testing



OTHER TO DO:

- demos, docs

*/
